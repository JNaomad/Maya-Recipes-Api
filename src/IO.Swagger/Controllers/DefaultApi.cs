/*
 * API de recettes
 *
 * Une API pour créer, lire, mettre à jour et supprimer des recettes.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    {


        private readonly RecipesContext _context;

        public DefaultApiController(RecipesContext context)
        {
            _context = context;
        }

        /// <summary>
        /// Liste toutes les recettes
        /// </summary>
        /// <response code="200">Une liste de recettes</response>
        [HttpGet]
        [Route("/api/recipes")]
        [ValidateModelState]
        [SwaggerOperation("RecipesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(RecipesList), description: "Une liste de recettes")]
        public async Task<IActionResult> RecipesGet()
        {
            var recipes = await _context.Recipes.ToListAsync();
            return Ok(recipes);
        }

        /// <summary>
        /// Supprime une recette
        /// </summary>
        /// <param name="id"></param>
        /// <response code="204">Recette supprimée</response>
        [HttpDelete]
        [Route("/api/recipes/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RecipesIdDelete")]
        public async Task<IActionResult> RecipesIdDelete([FromRoute][Required] int? id)
        {
            var recipe = await _context.Recipes.FindAsync(id);
            if (recipe == null)
            {
                return NotFound();
            }
            _context.Recipes.Remove(recipe);
            await _context.SaveChangesAsync();
            return NoContent();
        }

        /// <summary>
        /// Trouve une recette par ID
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Une recette spécifique</response>
        [HttpGet]
        [Route("/api/recipes/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RecipesIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Recipe), description: "Une recette spécifique")]
        public async Task<IActionResult> RecipesIdGet([FromRoute][Required] int? id)
        {
            var recipe = await _context.Recipes.FindAsync(id);
            if (recipe == null)
            {
                return NotFound();
            }
            return Ok(recipe);
        }
        /// <summary>
        /// Met à jour une recette existante
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <response code="200">Recette mise à jour</response>
        [HttpPut]
        [Route("/api/recipes/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RecipesIdPut")]
        public async Task<IActionResult> RecipesIdPut([FromBody] Recipe body, [FromRoute][Required] int? id)
        {
            if (id != body.Id)
            {
                return BadRequest();
            }

            _context.Entry(body).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Recipes.Any(e => e.Id == id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        /// <summary>
        /// Ajoute une nouvelle recette
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Recette créée</response>
        [HttpPost]
        [Route("/api/recipes")]
        [ValidateModelState]
        [SwaggerOperation("RecipesPost")]
        public async Task<IActionResult> RecipesPost([FromBody] Recipe body)
        {
            _context.Recipes.Add(body);
            await _context.SaveChangesAsync();
            return CreatedAtAction("RecipesIdGet", new { id = body.Id }, body);
        }
    }
}
